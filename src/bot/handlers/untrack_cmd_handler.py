from telethon import events, Button
from dotenv import load_dotenv
from http import HTTPStatus
import httpx
import os
from typing import Any
import redis.asyncio as redis
import json

from src.bot.states.states import UnTrackState
from src.database.sql_database import user_states, user_data
from src.initialization.bot_client_init import bot_client
from src.api.schemas.schemas import RemoveLinkRequest

load_dotenv()

SCRAPPER_API_URL = os.getenv("SCRAPPER_API_URL")
REDIS_URL = os.getenv("REDIS_URL")

redis_client = redis.from_url(REDIS_URL, decode_responses=True)


async def handle_waiting_for_choice(event: events.NewMessage.Event, user_id: int) -> None:
    """
    –û–∂–∏–¥–∞–µ—Ç –≤–≤–æ–¥ –Ω–æ–º–µ—Ä–∞ —Å—Å—ã–ª–∫–∏ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    :param event:
    :param user_id:
    :return:
    """
    try:
        deleted_link_id = int(event.message.text.strip())
    except ValueError:
        await event.respond("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ –Ω–æ–º–µ—Ä–∞ —Å—Å—ã–ª–∫–∏.")
        return
    user_data["deleted_link_number"] = deleted_link_id
    user_states[user_id] = UnTrackState.WAITING_FOR_CONFIRMATION

    buttons = [
        [
            Button.text("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", resize=True),
            Button.text("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", resize=True),
        ]
    ]
    await event.respond(
        f"–ü–µ—Ä–µ—Å—Ç–∞—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Ä–µ—Å—É—Ä—Å –ø–æ–¥ –Ω–æ–º–µ—Ä–æ–º {deleted_link_id}?",
        buttons=buttons,
    )


async def handle_waiting_for_confirmation(event: events.NewMessage.Event, user_id: int) -> None:
    """
    –û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏
    :param event:
    :param user_id:
    :return:
    """
    text = event.message.text.strip().lower()
    if text in ["‚úÖ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", "–ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å"]:
        deleted_link_number = user_data.get("deleted_link_number")
        if deleted_link_number is None:
            raise ValueError("–ù–µ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –≤–≤–µ–¥–µ–Ω—ã")

        user_links = user_data.get("user_links")
        if user_links is None:
            raise ValueError("–î–∞–Ω–Ω—ã–µ –æ —Å—Å—ã–ª–∫–∞—Ö –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")

        links_list = user_links.get("links")
        if not isinstance(links_list, list) or not (1 <= deleted_link_number <= len(links_list)):
            await event.respond("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Å—Å—ã–ª–∫–∏.")
            return

        link_url = links_list[deleted_link_number - 1].get("url")
        if not isinstance(link_url, str):
            await event.respond("‚ùå –û—à–∏–±–∫–∞: —Å—Å—ã–ª–∫–∞ –∏–º–µ–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.")
            return

        data = RemoveLinkRequest(url=link_url)
        async with httpx.AsyncClient() as client:
            response = await client.delete(
                f"{SCRAPPER_API_URL}/links",
                headers={"tg-chat-id": str(user_id)},
                params={"url": data.url},
            )

        match response.status_code:
            case HTTPStatus.OK:
                await event.respond(f"‚úÖ –°—Å—ã–ª–∫–∞ {link_url} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è!")
                cache_key = f"links:{user_id}"
                cached_json = await redis_client.get(cache_key)
                if cached_json:
                    try:
                        cached_data = json.loads(cached_json)
                    except Exception:
                        cached_data = {"links": [], "size": 0}
                else:
                    cached_data = None

                if cached_data and "links" in cached_data:
                    new_links = [
                        link for link in cached_data["links"] if link.get("url") != link_url
                    ]
                    cached_data["links"] = new_links
                    cached_data["size"] = len(new_links)
                    await redis_client.set(cache_key, json.dumps(cached_data))
            case _:
                await event.respond("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å—Å—ã–ª–∫–∏")
    else:
        await event.respond("‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
    user_states.pop(user_id, None)


@bot_client.on(events.NewMessage())  # type: ignore
async def handle_messages(event: events.NewMessage.Event) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :param event:
    :return:
    """
    user_id = event.sender_id
    user_state = user_states.get(user_id)

    if user_state == UnTrackState.WAITING_FOR_CHOICE:
        await handle_waiting_for_choice(event, user_id)
    elif user_state == UnTrackState.WAITING_FOR_CONFIRMATION:
        await handle_waiting_for_confirmation(event, user_id)


@bot_client.on(events.NewMessage(pattern="/untrack"))  # type: ignore
async def untrack_cmd_handler(event: events.NewMessage.Event) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /untrack
    :param event:
    :return:
    """
    user_id = event.sender_id
    user_states[user_id] = UnTrackState.WAITING_FOR_CHOICE

    async with httpx.AsyncClient() as client:
        response = await client.get(
            f"{SCRAPPER_API_URL}/links", headers={"tg-chat-id": str(user_id)}
        )

        match response.status_code:
            case HTTPStatus.OK:
                data: dict[str, Any] = response.json()
            case _:
                await event.respond("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Å—Å—ã–ª–æ–∫")
                return

    user_data["user_links"] = data
    if data.get("size", 0) == 0:
        text = "–°–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Å—Å—ã–ª–æ–∫ –ø—É—Å—Ç\n–£–¥–∞–ª—è—Ç—å –Ω–µ—á–µ–≥–æ"
    else:
        text = "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—Å—ã–ª–∫–∏, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –ø—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—åüîó:\n\n"
        links = data.get("links")
        if isinstance(links, list):
            for num, link in enumerate(links, start=1):
                url = link.get("url", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
                text += f"{num}. {url}\n"
        else:
            text = "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Å—Å—ã–ª–∫–∞—Ö."
    await event.respond(text, parse_mode="Markdown")
