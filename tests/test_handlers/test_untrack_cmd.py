import pytest
from unittest.mock import patch, AsyncMock
from http import HTTPStatus
import httpx
from src.bot.handlers.untrack_cmd_handler import (
    untrack_cmd_handler,
    handle_waiting_for_choice,
    handle_waiting_for_confirmation,
)
from src.database.sql_database import user_states, user_data
from src.bot.states.states import UnTrackState


@pytest.mark.asyncio
async def test_untrack_cmd_handler_empty_list(mock_event: AsyncMock) -> None:
    """–¢–µ—Å—Ç: –ë–æ—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–æ–±—â–∏—Ç—å, —á—Ç–æ —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Å—Å—ã–ª–æ–∫ –ø—É—Å—Ç"""
    mock_event.message.text = "/untrack"

    with patch("httpx.AsyncClient.get") as mock_get:
        mock_get.return_value = httpx.Response(
            status_code=HTTPStatus.OK,
            json={"links": [], "size": 0},
        )

        await untrack_cmd_handler(mock_event)

        mock_event.respond.assert_called_once_with(
            "–°–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Å—Å—ã–ª–æ–∫ –ø—É—Å—Ç\n–£–¥–∞–ª—è—Ç—å –Ω–µ—á–µ–≥–æ",
            parse_mode="Markdown",
        )


@pytest.mark.asyncio
async def test_untrack_cmd_handler_with_links(mock_event: AsyncMock) -> None:
    """–¢–µ—Å—Ç: –ë–æ—Ç –¥–æ–ª–∂–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤—ã–≤–µ—Å—Ç–∏ —Å–ø–∏—Å–æ–∫ —Å—Å—ã–ª–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"""
    mock_event.message.text = "/untrack"

    test_links = [
        {"url": "https://example1.com"},
        {"url": "https://example2.com"},
    ]

    with patch("httpx.AsyncClient.get") as mock_get:
        mock_get.return_value = httpx.Response(
            status_code=HTTPStatus.OK,
            json={"links": test_links, "size": len(test_links)},
        )

        await untrack_cmd_handler(mock_event)

        expected_message = (
            "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—Å—ã–ª–∫–∏, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –ø—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—åüîó:\n\n"
            "1. https://example1.com\n"
            "2. https://example2.com\n"
        )

        mock_event.respond.assert_called_once_with(expected_message, parse_mode="Markdown")


@pytest.mark.asyncio
async def test_handle_waiting_for_choice_invalid_number(mock_event: AsyncMock) -> None:
    """–¢–µ—Å—Ç: –ë–æ—Ç –¥–æ–ª–∂–µ–Ω –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –æ—à–∏–±–∫—É, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä"""
    mock_event.message.text = "abc"  # –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ (–Ω–µ —á–∏—Å–ª–æ)

    await handle_waiting_for_choice(mock_event, mock_event.sender_id)

    mock_event.respond.assert_called_once_with("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ –Ω–æ–º–µ—Ä–∞ —Å—Å—ã–ª–∫–∏.")


@pytest.mark.asyncio
async def test_handle_waiting_for_confirmation_success(mock_event: AsyncMock) -> None:
    """–¢–µ—Å—Ç: –ë–æ—Ç –¥–æ–ª–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–∏—Ç—å —Å—Å—ã–ª–∫—É"""
    mock_event.message.text = "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å"

    user_data["deleted_link_number"] = 1
    user_data["user_links"] = {"links": [{"url": "https://example.com"}]}
    user_states[mock_event.sender_id] = UnTrackState.WAITING_FOR_CONFIRMATION

    with patch("httpx.AsyncClient.delete") as mock_delete:
        mock_delete.return_value = httpx.Response(status_code=HTTPStatus.OK)

        await handle_waiting_for_confirmation(mock_event, mock_event.sender_id)

        mock_event.respond.assert_called_once_with(
            "‚úÖ –°—Å—ã–ª–∫–∞ https://example.com —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è!"
        )


@pytest.mark.asyncio
async def test_handle_waiting_for_confirmation_fail(mock_event: AsyncMock) -> None:
    mock_event.message.text = "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å"

    user_data["deleted_link_number"] = 1
    user_data["user_links"] = {"links": [{"url": "https://example.com"}]}
    user_states[mock_event.sender_id] = UnTrackState.WAITING_FOR_CONFIRMATION

    with patch("httpx.AsyncClient.delete") as mock_delete:
        mock_delete.return_value = httpx.Response(status_code=HTTPStatus.BAD_REQUEST)

        await handle_waiting_for_confirmation(mock_event, mock_event.sender_id)

        mock_event.respond.assert_called_once_with("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å—Å—ã–ª–∫–∏")
